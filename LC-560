class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int sum=0,count=0;
        unordered_map<int,int>m;
        
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            if(sum==k)
                count++;
            if(m.find(sum-k)!=m.end())
                count+=m[sum-k];
             m[sum]++;
        }   
    
      return count;  
    }
};



//This aproach will work if we had to say only yes or no.
//In the above approach..we need to find if cursum-k==present in hashtable or not.We also need to get how many times has this cursum-k has seen before..thatswhy we use hashmap in order to store the  frequency of the numbers 
/*unordered_set<int>s;
        int sum=0,count=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
          
            if(sum==k||s.find(sum-k)!=s.end())
                count++;
             s.insert(sum);
            
        }
        return count;*/
