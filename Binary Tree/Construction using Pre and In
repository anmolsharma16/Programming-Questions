/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //Hashing used for efficient soln. Unoptimised approach should be to do linear search
    //in Inorder to find index of root;
     unordered_map<int,int>m;
     int index=0;
    
    TreeNode* solve(vector<int>&pre,vector<int>&in,int start,int end){
        
        if(start>end)
            return NULL;
        
        
        TreeNode*root=new TreeNode(pre[index]);
        index++;
        
        int mid=m[root->val];
        root->left=solve(pre,in,start,mid-1);
        root->right=solve(pre,in,mid+1,end);
        return root;

        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
       
        for(int i=0;i<inorder.size();i++)
            m[inorder[i]]=i;
        TreeNode* root=solve(preorder,inorder,0,preorder.size()-1);
            return root;
        
    }
};
