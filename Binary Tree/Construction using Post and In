/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    unordered_map<int,int>m;
    TreeNode* solve(vector<int>&post,vector<int>&in,int start,int end,int &index){
        
        if(start>end)
            return NULL;
               
        TreeNode*root=new TreeNode(post[index--]);
            
        int mid=m[root->val];
        // Here we are going first right then left.
        // I don't know why
        root->right=solve(post,in,mid+1,end,index);
        root->left=solve(post,in,start,mid-1,index);
        return root;

    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        for(int i=0;i<inorder.size();i++)
            m[inorder[i]]=i;
        
        int index=postorder.size()-1;
        TreeNode* root=solve(postorder,inorder,0,postorder.size()-1,index);
            return root;    
        
    }
};
